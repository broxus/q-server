"Request with external inbound message"
input Request {
    "256-bit Hash of message in base64"
    id: String
    "Serialized message in base64"
    body: String
    "Message expiration time (unix time in ms)"
    expireAt: Float
}

"Aggregation function used to collect aggregated value"
enum AggregationFn {
    "Returns count of filtered record"
    COUNT
    "Returns the minimal value for a field in filtered records"
    MIN
    "Returns the maximal value for a field in filtered records"
    MAX
    "Returns a sum of values for a field in filtered records"
    SUM
    "Returns an average value for a field in filtered records"
    AVERAGE
}


"Specify field and aggregation function used to collect aggregated value"
input FieldAggregation {
    "Dot separated path to field. Can be omitted for COUNT fn."
    field: String
    "Aggregation function. Default value is COUNT."
    fn: AggregationFn
}

extend type Query {
    "Compute aggregated values for specified fields"
    aggregateAccounts(
        "Specify filter for records to aggregate"
        filter: AccountFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation]
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateTransactions(
        "Specify filter for records to aggregate"
        filter: TransactionFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation]
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateMessages(
        "Specify filter for records to aggregate"
        filter: MessageFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation]
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateBlocks(
        "Specify filter for records to aggregate"
        filter: BlockFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation]
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateBlockSignatures(
        "Specify filter for records to aggregate"
        filter: BlockSignaturesFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation]
    ): [String]

    "Compute aggregated values for specified fields"
    aggregateTokensTransactions(
        "Specify filter for records to aggregate"
        filter: TokenTransactionFilter,
        "Specify list of fields to collect aggregated values"
        fields: [FieldAggregation]
    ): [String]
}

type Mutation {
    "Post external inbound message to blockchain node."
    postRequests(
        "List of message requests"
        requests: [Request]
    ): [String]
}
